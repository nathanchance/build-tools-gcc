#!/usr/bin/env bash
#
# GCC cross compiler  compilation script
#
# Copyright (C) 2016-2017 USBhost
# Copyright (C) 2016-2017 Joe Maples
# Copyright (C) 2017 Nathan Chancellor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

###########
# SOURCES #
###########

# http://preshing.com/20141119/how-to-build-a-gcc-cross-compiler/ # credits for almost everything
# http://www.mpfr.org/
# https://gmplib.org/
# http://www.multiprecision.org/
# http://isl.gforge.inria.fr/
# https://www.gnu.org/software/binutils/
# https://www.gnu.org/software/libc/
# https://www.kernel.org/
# https://git.linaro.org/toolchain/gcc.git # linaro and gnu


#########
# USAGE #
#########

# bash build -h


#############
# FUNCTIONS #
#############

BASH_DIR=$( cd $( dirname $( readlink -f "${BASH_SOURCE[0]}" ) ) && pwd )
source ${BASH_DIR}/functions


##############
# Parameters #
##############

# Default options, can be edited or modified here OR changed with parameter below
TARGET="aarch64-linux-gnu"
ARCH="arm64"
GCC="gcc-6-branch"
TMPFS="yes"

# If there are no parameters, assume user just wants to build
[[ $# -eq 0 ]] && BUILD=true

for arg in "$@"; do
  shift
  case "$arg" in
    "--arm")      set -- "$@" "-a" ;;
    "--build")    set -- "$@" "-b" ;;
    "--clean")    set -- "$@" "-c" ;;
    "--download") set -- "$@" "-d" ;;
    "--help")     set -- "$@" "-h" ;;
    "--linaro")   set -- "$@" "-l" ;;
    "--no-tmpfs") set -- "$@" "-n" ;;
    "--update")   set -- "$@" "-u" ;;
    *)            set -- "$@" "$arg"
  esac
done

while getopts ":abcdhlnu" opt; do
    case ${opt} in
        a)
            TARGET="arm-linux-gnueabi"
            ARCH="arm" ;;
        b)
            BUILD=true ;;
        c)
           CLEAN=true ;;
        d)
           DOWNLOAD=true ;;
        h)
           echo; help_menu ;;
        l)
            # There are a few Linaro branches to consider:
            # linaro-local/releases/linaro-6.3-2017.05
            # linaro-local/gcc-6-integration-branch
            # linaro/gcc-6-branch
            GCC="linaro-local/releases/linaro-6.3-2017.05" ;;
        n)
            TMPFS=no ;;
        u)
            UPDATE=true ;;
        *)
            reportWarning "Unknown parameter ${OPTARG} passed, ignoring"
    esac
done

#############
# VARIABLES #
#############

# Configuration variables
CONFIGURATION="--disable-multilib --disable-werror"
INSTALL="${BASH_DIR}/${TARGET}"
PATH=${INSTALL}/bin:${PATH}
JOBS="-j$( nproc --all )"

# Binary versions
BINUTILS="binutils-2_28-branch"
GMP="gmp-6.1.2"
MPFR="mpfr-3.1.5"
MPC="mpc-1.0.3"
ISL="master"
GLIBC="glibc-2.25"


#######################
# DOWNLOADING SOURCES #
#######################

START=$( date +%s )

if [[ ${DOWNLOAD} = true ]]; then
    echoText "DOWNLOADING SOURCES"

    if [[ ! -e ${MPFR}.tar.xz ]] && [[ ! -d ${MPFR} ]]; then
        wget http://www.mpfr.org/mpfr-current/${MPFR}.tar.xz &
        EX=1
    fi
    if [[ ! -e ${GMP}.tar.xz ]] && [[ ! -d ${GMP} ]]; then
        wget ftp://ftp.gnu.org/gnu/gmp/${GMP}.tar.xz &
        EX=1
    fi
    if [[ ! -e ${MPC}.tar.gz ]] && [[ ! -d ${MPC} ]]; then
        wget ftp://ftp.gnu.org/gnu/mpc/${MPC}.tar.gz &
        EX=1
    fi
    if [[ ! -e ${GLIBC}.tar.xz ]] && [[ ! -d ${GLIBC} ]]; then
        wget http://ftp.gnu.org/gnu/glibc/${GLIBC}.tar.xz &
        EX=1
    fi
    if [[ ! -e isl ]]; then
        git clone git://repo.or.cz/isl.git -b ${ISL} &
    fi
    if [[ ! -e binutils ]]; then
        git clone https://git.linaro.org/toolchain/binutils-gdb.git binutils -b ${BINUTILS} &
    fi
    if [[ ! -e gcc ]]; then
        git clone https://git.linaro.org/toolchain/gcc.git &
    fi
    if [[ ! -e linux ]]; then
        git clone https://github.com/torvalds/linux.git &
    fi
    for JOB in $( jobs -p ); do
	    wait ${JOB}
    done
    if [[ ${EX} = 1 ]]; then
        for F in *.tar*; do tar xfk ${F}; done
        rm *.tar*
    fi
    if [[ -d isl ]]; then
        cd isl && ./autogen.sh && cd ..
    fi
fi


############
# CLEANING #
############

if [[ ${CLEAN} = true ]]; then
    echoText "CLEANING UP"

    rm -rf build-glibc/*
    rm -rf build-gcc/*
    rm -rf build-binutils/*
    rm -rf *.tar.xz
    rm -rf *linux-gnu*
    echo "Clean up successful!"
fi


############
# UPDATING #
############

if [[ ${UPDATE} = true ]] || [[ ${DOWNLOAD} = true ]]; then
    echoText "UPDATING SOURCES"

    cd isl
    git remote update
    git checkout ${ISL}
    git merge origin/${ISL}
    ./autogen.sh

    cd ../binutils
    git remote update
    git checkout ${BINUTILS}
    git merge origin/${BINUTILS}

    cd ../gcc
    git remote update
    git checkout ${GCC}
    git merge origin/${GCC}

    cd ../linux
    git remote update
    git merge origin/master

    cd ..
fi


###############
# PREPARATION #
###############

if [[ -z ${BUILD} ]]; then
    reportWarning "Building was not requested, ending script!" && exit
elif [[ ! -d gcc ]]; then
    reportError "GCC source is missing! Did you run with --download?"
    help_menu
fi

mkdir -p build-glibc
mkdir -p build-gcc
mkdir -p build-binutils

if [[ ${TMPFS} = "yes" ]]; then
    if [[ check_sudo ]]; then
        echo "Please enter your password at the following prompt. It is needed to that we can mount some folders on tmpfs";
    fi
    sudo mount -t tmpfs -o rw none build-glibc
    sudo mount -t tmpfs -o rw none build-gcc
    sudo mount -t tmpfs -o rw none build-binutils
fi

cd gcc
ln -s -f ../${MPFR} mpfr
ln -s -f ../${GMP} gmp
ln -s -f ../${MPC} mpc
ln -s -f ../isl isl
cd ..


############
# BUILDING #
############

echoText "BUILDING BINUTILS"
cd build-binutils
../binutils/configure ${CONFIGURATION} --target=${TARGET} --prefix=${INSTALL} --disable-gdb
make ${JOBS} || exit 1
make install ${JOBS} || exit 1


echoText "MAKING LINUX HEADERS"
cd ../linux
make ARCH=${ARCH} INSTALL_HDR_PATH=${INSTALL}/${TARGET} headers_install ${JOBS} || exit 1


echoText "MAKING GCC"
cd ../build-gcc
../gcc/configure ${CONFIGURATION} --enable-languages=c --target=${TARGET} --prefix=${INSTALL}
make all-gcc ${JOBS} || exit 1
make install-gcc ${JOBS} || exit 1
if [[ ${ARCH} = "x86_64" ]]; then
    make all-target-libgcc ${JOBS} || exit 1
    make install-target-libgcc ${JOBS} || exit 1
fi


echoText "MAKING GLIBC"
cd ../build-glibc
../${GLIBC}/configure --prefix=${INSTALL}/${TARGET} --build=${MACHTYPE} --host=${TARGET} \
                      --target=${TARGET} --with-headers=${INSTALL}/${TARGET}/include \
                      ${CONFIGURATION} libc_cv_forced_unwind=yes
make install-bootstrap-headers=yes install-headers ${JOBS} || exit 1
make csu/subdir_lib ${JOBS} || exit 1
install csu/crt1.o csu/crti.o csu/crtn.o ${INSTALL}/${TARGET}/lib
${TARGET}-gcc -nostdlib -nostartfiles -shared -x c /dev/null -o ${INSTALL}/${TARGET}/lib/libc.so
touch ${INSTALL}/${TARGET}/include/gnu/stubs.h
if [[ ${ARCH} = "x86_64" ]]; then
    make ${JOBS} || exit 1
    make install ${JOBS} || exit 1
fi

if [[ ${ARCH} != "x86_64" ]]; then
    cd ../build-gcc
    make all-target-libgcc ${JOBS} || exit 1
    make install-target-libgcc ${JOBS} || exit 1

	cd ../build-glibc
    make ${JOBS} || exit 1
    make install ${JOBS} || exit 1
fi


echoText "INSTALLING GCC"
cd ../build-gcc
make all ${JOBS} || exit 1
make install ${JOBS} || exit 1
cd ..


if [[ ${TMPFS} = yes ]]; then
	sudo umount -f build-glibc
	sudo umount -f build-gcc
	sudo umount -f build-binutils
fi


#############
# PACKAGING #
#############

if [[ $( echo ${GCC} | grep linaro ) ]]; then
	TAG=linaro-$( TZ=UTC date +%Y%m%d )
else
	TAG=$( TZ=UTC date +%Y%m%d )
fi

if [[ $( grep -i "Ubuntu" /etc/os-release ) ]]; then
    DISTRO=-ubuntu
elif [[ $( grep -i "Arch" /etc/os-release ) ]]; then
	DISTRO=-arch
fi

echoText "PACKAGING TOOLCHAIN"

echo "Target file: ${TARGET}-${TAG}${DISTRO}.tar.xz"
echo "Packaging..."
XZ_OPT=-9 tar cJf ${TARGET}-${TAG}${DISTRO}.tar.xz ${TARGET}


#################
# ENDING OUTPUT #
#################

END=$( date +%s )

if [[ -e ${TARGET}-${TAG}${DISTRO}.tar.xz ]]; then
    echoText "BUILD SUCESSFUL"
    echo -e "${BOLD}Script duration:${RST} $( format_time ${START} ${END} )"
    echo -e "${BOLD}File location:${RST} ${TARGET}-${TAG}${DISTRO}.tar.xz"
    echo -e "${BOLD}File size:${RST} $( du -h ${TARGET}-${TAG}${DISTRO}.tar.xz | awk '{print $1}' )"
else
    echoText "BUILD FAILED"
fi

# Alert to script end
echo -e "\a"
