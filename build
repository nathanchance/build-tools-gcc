#!/usr/bin/env bash
#
# GCC cross compiler  compilation script
#
# Copyright (C) 2016-2017 USBhost
# Copyright (C) 2016-2017 Joe Maples
# Copyright (C) 2017 Nathan Chancellor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

###########
# SOURCES #
###########

# http://preshing.com/20141119/how-to-build-a-gcc-cross-compiler/ # credits for almost everything
# http://www.mpfr.org/
# https://gmplib.org/
# http://www.multiprecision.org/
# http://isl.gforge.inria.fr/
# https://www.gnu.org/software/binutils/
# https://www.gnu.org/software/libc/
# https://www.kernel.org/
# https://git.linaro.org/toolchain/gcc.git # linaro and gnu


#########
# USAGE #
#########

# bash build -h


#############
# FUNCTIONS #
#############

BASH_DIR=$(cd $(dirname $(readlink -f "${BASH_SOURCE[0]}")) && pwd)
source ${BASH_DIR}/functions


#############
# VARIABLES #
#############

# Configuration variables
CONFIGURATION="--disable-multilib --disable-werror"
JOBS="-j$(nproc --all)"

# Binary versions
BINUTILS="binutils-2_29-branch"
GMP="gmp-6.1.2"
MPFR="mpfr-3.1.6"
MPC="mpc-1.0.3"
ISL="master"
GLIBC="glibc-2.26"


##############
# Parameters #
##############

while [[ $# -ge 1 ]]; do
    case "${1}" in
        # REQUIRED FLAGS
        "-a"|"--arch") shift && ARCH=${1} ;;
        "-s"|"--source") shift && SOURCE=${1} ;;
        "-v"|"--version") shift && VERSION=${1} ;;

        # OPTIONAL FLAGS
        "-nc"|"--no-clean") CLEAN=false ;;
        "-nt"|"--no-tmpfs") TMPFS=false ;;
        "-nu"|"--no-update") UPDATE=false ;;
        "-p"|"--package") shift && COMPRESSION=${1};;

        # HELP!
        "-h"|"--help") help_menu; exit ;;
    esac

    shift
done

# Default values
case "${ARCH}" in
    "arm") TARGET="arm-linux-gnueabi" ;;
    "arm64") TARGET="aarch64-linux-gnu" ;;
    "i686") TARGET="i686-linux-gnu" ;;
    "x86_64") TARGET="x86_64-linux-gnu" ;;
    *) report_error "Absent or invalid arch specified!" -h ;;
esac

# Set GCC branch based on version and Linaro or not
case "${SOURCE}:${VERSION}" in
    "gnu:4") GCC=gcc-4_9-branch;
             ISL="isl-0.17.1" ;;
    "gnu:5") GCC=gcc-5-branch;
             ISL="isl-0.17.1" ;;
    "gnu:6") GCC=gcc-6-branch ;;
    "gnu:7") GCC=gcc-7-branch ;;
    "gnu:8") GCC=master ;;
    "linaro:4") GCC=linaro-local/releases/linaro-4.9-2017.01;
                ISL="isl-0.17.1" ;;
    "linaro:5") GCC=linaro-local/gcc-5-integration-branch;
                ISL="isl-0.17.1" ;;
    "linaro:6") GCC=linaro-local/gcc-6-integration-branch ;;
    "linaro:7") GCC=linaro-local/gcc-7-integration-branch ;;
    "linaro:8") report_error "There's no such thing as Linaro 8.x Clannad..." -h ;;
    *) report_error "Absent or invalid GCC version or source specified!" -h ;;
esac


#######################
# DOWNLOADING SOURCES #
#######################

START=$(date +%s)

if [[ ! -d ${MPFR} ]]; then
    header "DOWNLOADING MPR"
    wget http://www.mpfr.org/mpfr-current/${MPFR}.tar.xz
    EXTRACTION_NEEDED=true
fi

if [[ ! -d ${GMP} ]]; then
    header "DOWNLOADING GMP"
    wget ftp://ftp.gnu.org/gnu/gmp/${GMP}.tar.xz
    EXTRACTION_NEEDED=true
fi

if [[ ! -d ${MPC} ]]; then
    header "DOWNLOADING MPC"
    wget ftp://ftp.gnu.org/gnu/mpc/${MPC}.tar.gz
    EXTRACTION_NEEDED=true
fi

if [[ ! -d ${GLIBC} ]]; then
    header "DOWNLOADING GLIBC"
    wget http://ftp.gnu.org/gnu/glibc/${GLIBC}.tar.xz
    EXTRACTION_NEEDED=true
fi

if [[ ${VERSION} -le 5 ]]; then
    if [[ ! -d ${ISL} ]]; then
        header "DOWNLOADING ISL"
        wget http://isl.gforge.inria.fr/${ISL}.tar.xz
        EXTRACTION_NEEDED=true
    fi
else
    if [[ ! -d isl ]]; then
        header "DOWNLOADING ISL"
        git clone git://repo.or.cz/isl.git --depth 1 -b ${ISL}
    fi
fi

if [[ ! -d binutils ]]; then
    header "DOWNLOADING BINUTILS"
    git clone https://git.linaro.org/toolchain/binutils-gdb.git binutils --depth 1 -b ${BINUTILS}
fi

if [[ ! -d gcc ]]; then
    header "DOWNLOADING GCC"
    git clone https://git.linaro.org/toolchain/gcc.git --depth 1 -b ${GCC}
fi

if [[ ! -d linux ]]; then
    header "DOWNLOADING LINUX KERNEL"
    git clone https://github.com/torvalds/linux.git --depth 1
fi

if [[ ${EXTRACTION_NEEDED} = true ]]; then
    header "EXTRACTING DOWNLOADED TARBALLS"
    for F in *.tar*; do tar xfk ${F}; done
    rm *.tar*
fi

if [[ -d isl ]] && [[ ${UPDATE} = false ]]; then
    cd isl && ./autogen.sh && cd ..
fi


if [[ ${CLEAN} != false ]]; then
    header "CLEANING UP"

    rm -rf build-glibc
    rm -rf build-gcc
    rm -rf build-binutils
    rm -rf *.tar.${COMPRESSION}
    rm -rf *linux-gnu*
    if [[ -d build-glibc ]] ||
       [[ -d build-gcc ]] ||
       [[ -d build-binutils ]] ||
       [[ -f *.tar.${COMPRESSION} ]] ||
       [[ -f *linux-gnu* ]]; then

        echo "Clean up failed! Aborting. Try checking that you have proper permissions to delete files."
        exit

    else
        echo "Clean up successful!"

    fi
fi


############
# UPDATING #
############

if [[ ${UPDATE} != false ]]; then
    header "UPDATING SOURCES"

    if [[ ${VERSION} -ge 6 ]]; then
        cd isl
        git remote update
        git checkout ${ISL}
        git merge origin/${ISL}
        ./autogen.sh
        cd ..
    fi

    cd binutils
    git remote update
    git checkout ${BINUTILS}
    git merge origin/${BINUTILS}
    cd ..

    cd gcc
    git remote update
    git checkout ${GCC}
    git merge origin/${GCC}
    cd ..

    cd linux
    git remote update
    git merge origin/master
    cd ..
fi


###############
# PREPARATION #
###############

INSTALL="${BASH_DIR}/${TARGET}"
PATH=${INSTALL}/bin:${PATH}

if [[ ! -d gcc ]]; then
    report_error "GCC source is missing! Please check your connection and rerun the script!" -h
fi

mkdir build-glibc
mkdir build-gcc
mkdir build-binutils

if [[ ${TMPFS} != false ]]; then
    if [[ check_sudo ]]; then
        echo "Please enter your password at the following prompt. It is needed so we can mount some folders on tmpfs.";
    fi
    sudo mount -t tmpfs -o rw none build-glibc
    sudo mount -t tmpfs -o rw none build-gcc
    sudo mount -t tmpfs -o rw none build-binutils
fi

cd gcc
ln -s -f ../${MPFR} mpfr
ln -s -f ../${GMP} gmp
ln -s -f ../${MPC} mpc
if [[ ${VERSION} -le 5 ]]; then
    ln -s -f ../${ISL} isl
else
    ln -s -f ../isl isl
fi
cd ..


############
# BUILDING #
############

header "BUILDING BINUTILS"
cd build-binutils
../binutils/configure ${CONFIGURATION} \
                      --target=${TARGET} \
                      --prefix=${INSTALL} \
                      --disable-gdb
make ${JOBS} || report_error "Error while building binutils!" -n
make install ${JOBS} || report_error "Error while installing binutils!" -n


header "MAKING LINUX HEADERS"
cd ../linux
make ARCH=${ARCH} \
    INSTALL_HDR_PATH=${INSTALL}/${TARGET} \
    headers_install ${JOBS} || report_error "Error while building/installing Linux headers!" -n


header "MAKING GCC"
cd ../build-gcc
../gcc/configure ${CONFIGURATION} \
                 --enable-languages=c \
                 --target=${TARGET} \
                 --prefix=${INSTALL}
make all-gcc ${JOBS} || report_error "Error while building gcc!" -n
make install-gcc ${JOBS} || report_error "Error while installing gcc!" -n
if [[ ${ARCH} = "x86_64" ]]; then
    make all-target-libgcc ${JOBS} || report_error "Error while installing libgcc for host!" -n
    make install-target-libgcc ${JOBS} || report_error "Error while installing libgcc for target!" -n
fi


header "MAKING GLIBC"
cd ../build-glibc
../${GLIBC}/configure --prefix=${INSTALL}/${TARGET} \
                      --build=${MACHTYPE} \
                      --host=${TARGET} \
                      --target=${TARGET} \
                      --with-headers=${INSTALL}/${TARGET}/include \
                      ${CONFIGURATION} libc_cv_forced_unwind=yes
make install-bootstrap-headers=yes install-headers ${JOBS} || report_error "Error installing headers for glibc!" -n
make csu/subdir_lib ${JOBS} || report_error "Error while making subdir_lib for glibc!" -n
install csu/crt1.o csu/crti.o csu/crtn.o ${INSTALL}/${TARGET}/lib
${TARGET}-gcc -nostdlib -nostartfiles -shared -x c /dev/null -o ${INSTALL}/${TARGET}/lib/libc.so
touch ${INSTALL}/${TARGET}/include/gnu/stubs.h
if [[ ${ARCH} = "x86_64" || ${ARCH} = "i686" ]]; then
    make ${JOBS} || report_error "Error while building glibc for the host!" -n
    make install ${JOBS} || report_error "Error while installing glibc for the host!" -n
else
    cd ../build-gcc
    make all-target-libgcc ${JOBS} || report_error "Error while building libgcc for target!" -n
    make install-target-libgcc ${JOBS} || report_error "Error while installing libgcc for target!" -n

	cd ../build-glibc
    make ${JOBS} || report_error "Error while building glibc for target" -n
    make install ${JOBS} || report_error "Error while installing glibc for target" -n
fi


header "INSTALLING GCC"
cd ../build-gcc
make all ${JOBS} || report_error "Error while compiling final toolchain!" -n
make install ${JOBS} || report_error "Error while installing final toolchain!" -n
cd ..


if [[ ${TMPFS} != false ]]; then
    [[ check_sudo ]] && echo "Please enter your password at the following prompt. It is needed so we can unmount the build folders from tmpfs.";
    sudo umount -f build-glibc
    sudo umount -f build-gcc
    sudo umount -f build-binutils
fi


#############
# PACKAGING #
#############

if [[ -n ${COMPRESSION} ]]; then
    PACKAGE=${TARGET}-${VERSION}.x-${SOURCE}-$(TZ=UTC date +%Y%m%d).tar.${COMPRESSION}

    header "PACKAGING TOOLCHAIN"

    echo "Target file: ${PACKAGE}"

    case "${COMPRESSION}" in
        "gz")
            echo "Packaging with GZIP..."
            GZ_OPT=-9 tar -zcf ${PACKAGE} ${TARGET} ;;
        "xz")
            echo "Packaging with XZ..."
            XZ_OPT=-9 tar -Jcf ${PACKAGE} ${TARGET} ;;
        *)
            report_error "Invalid compression specified... skipping" ;;
    esac
fi

#################
# ENDING OUTPUT #
#################

END=$(date +%s)

if [[ -e ${TARGET}/bin/${TARGET}-gcc ]]; then
    header "BUILD SUCCESSFUL"
    echo "${BOLD}Script duration:${RST} $(format_time ${START} ${END})"
    echo "${BOLD}GCC version:${RST} $(${TARGET}/bin/${TARGET}-gcc --version | head -n 1)"
    if [[ -n ${COMPRESSION} ]] && [[ -e ${PACKAGE} ]]; then
        echo "${BOLD}File location:${RST} $(pwd)/${PACKAGE}"
        echo "${BOLD}File size:${RST} $(du -h ${PACKAGE} | awk '{print $1}')"
    else
        echo "${BOLD}Toolchain location:${RST} $(pwd)/${TARGET}"
    fi
else
    header "BUILD FAILED"
fi

# Alert to script end
echo "\a"
